@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": false,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": false,
    "cutConstructors": false
  },
  "graphTraversal": {
    "forwardDepth": 3,
    "backwardDepth": 3,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "boat.Boat",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_3029312 { 
   	label=boat
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Boat3029312[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Boat</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   costPrice: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   length: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   make: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   owner: Person [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   prices: double[] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   region: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   user: Person [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   variant: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   year: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Boat(make: String, variant: String, length: double, region: String, costPrice: double, sellPrice: double, rentPrice: double, year: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ compareTo(o: Boat): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getCostPrice(): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ getLength(): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ getMake(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getOwner(): Person</TD></TR>
<TR><TD ALIGN="LEFT" >+ getPrice(): double[]</TD></TR>
<TR><TD ALIGN="LEFT" >+ getRegion(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getSellPrice(): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ getUser(): Person</TD></TR>
<TR><TD ALIGN="LEFT" >+ getVarient(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getYear(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ hashCode(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ setCostPrice(costPrice: double)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setLength(length: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setMaker(maker: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setOwner(owner: Person)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setPrice(rentPrice: double, sellPrice: double, costPrice: double)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setRegion(region: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setUser(user: Person)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setYear(year: int)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_347208044 { 
   	label=backend
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Database347208044[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Database</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   allBoats: HashMap&lt;Boat, Boat&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >#   boats: ArrayList&lt;Boat&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >#   byAttributeBoats: HashMap&lt;String, ArrayList&lt;Boat&gt;&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >#   lengthBoats: TreeMap&lt;Double, ArrayList&lt;Boat&gt;&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >#   rPriceBoats: TreeMap&lt;Double, ArrayList&lt;Boat&gt;&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >#   sPriceBoats: TreeMap&lt;Double, ArrayList&lt;Boat&gt;&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >#   yearBoats: TreeMap&lt;Integer, ArrayList&lt;Boat&gt;&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Database(boats: ArrayList&lt;Boat&gt;)</TD></TR>
<TR><TD ALIGN="LEFT" >+ Database()</TD></TR>
<TR><TD ALIGN="LEFT" >+ addBoat(boat: Boat)</TD></TR>
<TR><TD ALIGN="LEFT" >+ deleteBoat(boat: Boat)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getAveragePrice(make: String): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ getBoats(): ArrayList&lt;Boat&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >- loadBoatsFromFile(): ArrayList&lt;Boat&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ returnNewBoat(make: String, variant: String, length: int, region: String, sellPrice: int, costPrice: int, rentPrice: int, year: int): Boat</TD></TR>
<TR><TD ALIGN="LEFT" >+ show()</TD></TR>
<TR><TD ALIGN="LEFT" >+ showAllBoats()</TD></TR>
<TR><TD ALIGN="LEFT" >+ showAllMakes()</TD></TR>
<TR><TD ALIGN="LEFT" >+ showAllrPrice()</TD></TR>
<TR><TD ALIGN="LEFT" >+ showAllsPrice()</TD></TR>
<TR><TD ALIGN="LEFT" >+ showBoatsByLengthRange(minLength: double, maxLength: double)</TD></TR>
<TR><TD ALIGN="LEFT" >+ showBoatsByMake(make: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ showBoatsByPriceRange(minPrice: double, maxPrice: double)</TD></TR>
<TR><TD ALIGN="LEFT" >+ showBoatsByRegion(region: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ showBoatsByVariant(variant: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ showBoatsByYear(year: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ showBoatsByYearRange(minYear: double, maxYear: double)</TD></TR>
<TR><TD ALIGN="LEFT" >+ showBoatsByrPrice(price: double)</TD></TR>
<TR><TD ALIGN="LEFT" >+ showBoatsBysPrice(price: double)</TD></TR>
<TR><TD ALIGN="LEFT" >+ showBoatsBysPriceAndMake(price: double, make: String)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

RegistrationSystem347208044[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)RegistrationSystem</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   FILE_PATH1: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   FILE_PATH2: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   input: Scanner [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   userDatabase: Map&lt;String, Client&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ getInputName(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getUserDatabase(): Map&lt;String, Client&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ loadUserDatabaseFromFile(): Map&lt;String, Client&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ registerUser()</TD></TR>
<TR><TD ALIGN="LEFT" >+ saveUserDatabaseToFile()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_991716523 { 
   	label=person
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Client991716523[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Client</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   appointment: HashSet&lt;Boat&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   credit: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   email: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   name: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   own: HashSet&lt;Boat&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   password: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   uniqueID: String [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Client(name: String, password: String, email: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getName(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getPassword(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getUniqueID(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ setName(name: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setPassword(password: String)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Company991716523[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Company</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   name: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   password: String [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Company(priority: int, name: String, password: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getName(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getPassword(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ setName(name: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setPassword(password: String)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

'edges    
Boat3029312 -> Client991716523[arrowhead=none];
Boat3029312 -> Client991716523[label="owner
[0..1]", arrowhead=none];
Boat3029312 -> Client991716523[label="user
[0..1]", arrowhead=none];
Boat3029312 -> Company991716523[arrowhead=none];
Client991716523 -> Boat3029312[label="appointment
[0..*]"];
Client991716523 -> Boat3029312[label="own
[0..*]"];
Client991716523 -> Company991716523[arrowhead=none];
Database347208044 -> Boat3029312[label="allBoats
[0..*]"];
Database347208044 -> Boat3029312[label="boats
[0..*]"];
Database347208044 -> Boat3029312[label="byAttributeBoats
[0..*]"];
Database347208044 -> Boat3029312[label="lengthBoats
[0..*]"];
Database347208044 -> Boat3029312[label="rPriceBoats
[0..*]"];
Database347208044 -> Boat3029312[label="sPriceBoats
[0..*]"];
Database347208044 -> Boat3029312[label="yearBoats
[0..*]"];
RegistrationSystem347208044 -> Client991716523[label="userDatabase
[0..*]"];
    
}
@enduml